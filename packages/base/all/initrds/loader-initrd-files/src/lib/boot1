# -*- sh -*-
############################################################
# <bsn.cl fy=2013 v=onl>
#
#        Copyright 2013, 2014 BigSwitch Networks, Inc.
#
# Licensed under the Eclipse Public License, Version 1.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
#        http://www.eclipse.org/legal/epl-v10.html
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the
# License.
#
# </bsn.cl>
############################################################
#
# boot1
#
# Copies/mounts rootfs from swi and switches root
#
######################################################################

mkdir -p /newroot
umount -l /newroot 2>/dev/null || :

if [ -d "${swipath}" ]; then
    # rootfs is a directory
    mount --bind "${swipath}/${rootfs}" /newroot
else
    # rootfs is a squashfs
    echo "Booting: ${swipath}"
    mkdir -p /newroot.lower /newroot.upper
    umount -l /newroot.lower 2>/dev/null || :
    umount -l /newroot.upper 2>/dev/null || :
    rm -f /tmp/rootfs
    uarch=`uname -m`

    ARCH_LIST=
    case $uarch in
        ppc)
            ARCH_LIST="ppc powerpc"
            ;;
        x86_64)
            ARCH_LIST="x86_64 amd64"
            ;;
        armv7l)
            ARCH_LIST="armel"
            ;;
        *)
            ;;
    esac

    for arch in $ARCH_LIST; do
        unzip -pq "${swipath}" "rootfs-$arch.sqsh" >/tmp/rootfs
        [ ! -s /tmp/rootfs  ] || break
    done

    if [ ! -s /tmp/rootfs ]; then
        echo "${swipath} does not contain a rootfs image for the current architecture ($uarch). Booting cannot continue."
        exit 1
    fi

    if grep -q overlayfs /proc/filesystems; then
        mount -t squashfs -o loop /tmp/rootfs /newroot.lower
        mount -t tmpfs -o size=15%,mode=0755 none /newroot.upper
        mount -t overlayfs -o lowerdir=/newroot.lower,upperdir=/newroot.upper none /newroot
    elif grep -q overlay /proc/filesystems; then
        mount -t squashfs -o loop /tmp/rootfs /newroot.lower
        mount -t tmpfs -o size=15%,mode=0755 none /newroot.upper
        mkdir /newroot.upper/upper
        mkdir /newroot.upper/work
        mount -t overlay  -olowerdir=/newroot.lower,upperdir=/newroot.upper/upper,workdir=/newroot.upper/work  overlay /newroot
    else
        echo "OverlayFS not found in kernel"
    fi
fi

mkdir -p /newroot/etc/onl
for thing in /etc/onl/*; do
    if [ $thing != "sysconfig" ]; then
        cp -R $thing /newroot/etc/onl
    fi
done

if [ -f /etc/fw_env.config ]; then
    cat /etc/fw_env.config >/newroot/etc/fw_env.config
fi

unzip -oq "${swipath}" swi-data.tar.gz -d /tmp

# Install any SWI data packages.
if [ -s /tmp/swi-data.tar.gz ]; then
    echo "Installing SWI data into /boot..."
    tar -C /newroot/boot -xzf /tmp/swi-data.tar.gz
fi

# If there is a SWI version file put it in /etc/onl/swi_version
unzip -oq "${swipath}" version -d /tmp
if [ -f /tmp/version ]; then
    cp /tmp/version /newroot/etc/onl/swi_version
    fi

#
# The file /lib/boot-custom can be provided by customized builds to
# add functionality before the root is switched.
#
if [ -f /lib/boot-custom ]; then
    . /lib/boot-custom
fi

echo "Switching rootfs" # limit 16 chars since serial buffer is not flushed
kill -QUIT 1 # exec /bin/switchroot as PID 1
sleep 30

# Local variables:
# sh-basic-offset: 4
# End:
