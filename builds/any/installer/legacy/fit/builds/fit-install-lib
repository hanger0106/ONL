# -*- sh -*-
######################################################################
#
# lib.sh
#
# Common files for install/recovery
#
######################################################################

############################################################
#
# Installation Utility Functions
#
############################################################

case "`/usr/sbin/fw_setenv --help 2>&1`" in
    *"-f"*"Force update"*)
        fw_setenv_dash_f="-f"
    ;;
esac

fw_setenv_f_s() {
    local f
    f=$1; shift

    /usr/sbin/fw_setenv ${fw_setenv_dash_f} -s "$f"
}

############################################################
#
# installer_create_device_file <blockdev> <partno>
#     <blockdev> The block device name
#     <partno>   The partition number.
#
#    Set the global variable 'installer_df' with the name of
#    the created device file.
#
# We can't always rely on the existance of a partition's
# device file after the device has been formatted.
#
# This function creates the appropriate device file
# for a given block partition to avoid this problem.
#
#

installer_create_device_file() {
    local blockdev=$1
    local partno=$2

    # Determine the device major number for the given block device:
    local major=`ls -l /dev/${blockdev} | tr "," " " | awk '{print $5}'`

    # Create a new device file matching the given partition
    installer_df=$(mktemp)
    rm ${installer_df}
    mknod "${installer_df}" b "${major}" "${partno}"
}

############################################################
#
# installer_partition_cp <blockdev> <partno> <src> <dst>
#
#    <blockdev> The block device name
#    <partno>   The partition number
#    <src>      The local source filename
#    <dst>      The destination filename
#
# Copy the source file to the given partition.
# The partition must be formatted/mountable.
#
############################################################

installer_partition_cp() {
    local blockdev=$1
    local partno=$2
    local src=$3
    local dst=$4

    installer_create_device_file ${blockdev} ${partno}
    mkdir -p "${installer_df}.mount"
    mount "${installer_df}" "${installer_df}.mount"
    cp "${src}" "${installer_df}.mount/${dst}"
    umount "${installer_df}.mount"
    rm "${installer_df}"
    rmdir "${installer_df}.mount"
}


############################################################
#
# installer_partition_dd <blockdev> <partno> <src>
#
#    <blockdev> The block device name
#    <partno>   The partition number.
#    <src>      The source file.
#
# 'dd' the contents of the src file directly to the given partition.
#
############################################################

installer_partition_dd() {
    local blockdev=$1
    local partno=$2
    local src=$3

    # installer_partition_dd <blockdev> <partno> <src>
    installer_create_device_file ${blockdev} ${partno}
    dd if=${src} of="${installer_df}" bs=1024
    rm "${installer_df}"
}

############################################################
#
# installer_partition_format <blockdev> <partno> <mkfs>
#
#    <blockdev> The block device name.
#    <partno>   The partition number.
#    <mkfs>     The formatting tool.
#
############################################################

installer_partition_format() {
    local blockdev=$1
    local partno=$2
    local mkfs=$3
    local options=$4
    local partition="$1$2"

    installer_say "Format ${partition}..."
    installer_create_device_file ${blockdev} ${partno}
    "${mkfs}" ${options} "${installer_df}"
    installer_say "Format ${partition} complete."
    rm "${installer_df}"
}

############################################################
#
# installer_umount_blockdev <blockdev>
#
#    <blockdev> The block device name.
#
# Unmount all partitions of the given blockdevice.
#
# Required to avoid errors when repartitioning block
# devices that are currently mounted.
#
############################################################

installer_umount_blockdev() {
    local blockdev=$1
    local mounts=`cat /proc/mounts | grep ${blockdev} | awk '{print $2}'`
    if [ "$mounts" ]; then
        umount $mounts || :
    fi
}


############################################################
#
# installer_blockdev_format <blockdev> <p1size> <p2size> <p3size>
#
#    <blockdev> The block device name.
#    <p1size>   The size of the boot partition.
#    <p2size>   The size of the config partition.
#    <p3size>   The size of the image partition.
#    <p4size>   [Optional] The size of the data partition.
#               If p4size is unset, the remainder of the device will be used
#               for the data partition.
#
############################################################
ONL_CONFIG_TARBALL=/tmp/onl_config.tgz
ONL_CONFIG_MOUNTPOINT=/mnt/onl_config_partition

installer_blockdev_format() {
    local blockdev=$1
    local partition1size=$2
    local partition2size=$3
    local partition3size=$4
    local partition4size=$5

    if [ -n "$ONL_BOOT_SIZE" ]; then
        echo "Using ONL_BOOT_SIZE override ($ONL_BOOT_SIZE)"
        partition1size=$ONL_BOOT_SIZE
    fi



    onl_config_partition=$(blkid | grep ONL-CONFIG | awk '{print $1}' | tr -d ':')

    #
    # If an ONL-CONFIG partition exists, we need to save and restore its contents.
    #
    if [ -n "$onl_config_partition" ]; then
        installer_say "Preserving the contents of the existing ONL-CONFIG partition..."
        rm -rf $ONL_CONFIG_MOUNTPOINT
        mkdir -p $ONL_CONFIG_MOUNTPOINT
        echo mount "$onl_config_partition" $ONL_CONFIG_MOUNTPOINT
        mount "$onl_config_partition" $ONL_CONFIG_MOUNTPOINT
        tar -C $ONL_CONFIG_MOUNTPOINT -cvzf $ONL_CONFIG_TARBALL .
        umount $ONL_CONFIG_MOUNTPOINT
    fi



    installer_umount_blockdev ${blockdev}
    installer_say "Formatting ${blockdev} as ${partition1size}:${partition2size}:${partition3size}:${partition4size}."
    echo -e "o\nn\np\n1\n\n+${partition1size}\nn\np\n2\n\n+${partition2size}\nn\np\n3\n\n+${partition3size}\nn\np\n4\n\n${partition4size}\np\nw\n" | fdisk /dev/${blockdev}


    _mkfs="mkfs.ext2"
    _archtools="${installer_dir}/`uname -m`"
    if [ -f "${_archtools}/mkfs.ext2" ]; then
        chmod a+x ${_archtools}/*
        echo "Using installer archtools mkfs.ext2..."
        _mkfs="${_archtools}/mkfs.ext2"
        ls -l "${_archtools}"
    fi

    installer_partition_format ${blockdev} 1 $_mkfs "-L ONL-BOOT"
    installer_partition_format ${blockdev} 2 $_mkfs "-L ONL-CONFIG"
    installer_partition_format ${blockdev} 3 $_mkfs "-L ONL-IMAGES"
    installer_partition_format ${blockdev} 4 $_mkfs "-L ONL-DATA"

    if [ -f $ONL_CONFIG_TARBALL ]; then
        installer_say "Restoring the contents of the existing ONL-CONFIG partition..."
        installer_create_device_file ${blockdev} 2
        mkdir -p "${installer_df}.mount"
        mount "${installer_df}" "${installer_df}.mount"
        tar -C "${installer_df}.mount" -xvzf $ONL_CONFIG_TARBALL
        umount "${installer_df}.mount"
        rm "${installer_df}"
        rmdir "${installer_df}.mount"
        rm $ONL_CONFIG_TARBALL
    fi
}

############################################################
#
# installer_platform_loader <blockdev> <partno>
#
#    <blockdev> The block device name.
#    <partno>   The partition number.
#
# Install the platform loader to the given partition.
#
#  The default is to copy the loader to the partition's filesystem.
#  If 'platform_loader_raw' is specified by the platform, the
#  loader will be written directly to the partition instead.
#
############################################################
installer_platform_loader() {
    local blockdev=$1
    local partno=$2


    if [ -f "${installer_dir}/${installer_platform}.itb" ]; then
        #
        # Platform-specfic FIT Image already provided.
        #
        local loader="${installer_dir}/${installer_platform}.itb"

    elif [ -f "${installer_dir}/onl-loader-fit.itb" ]; then
        #
        # Common FIT image.
        #
        local loader="${installer_dir}/onl-loader-fit.itb";
    else
        installer_say "There is not FIT image available in the installer. This is a bug."
        exit 1
    fi

    #
    # Cannonical name for all ITB files for each platform
    # is <platform>.itb.
    #
    # This allows you to use the ONL platform configuration settings
    # with your own initrd with constant and consistent naming.
    #
    loaderdst="${installer_platform}.itb"

    installer_say "Installing the Open Network Linux Loader..."

    if [ "${platform_loader_raw}" ]; then
        installer_partition_dd ${blockdev} ${partno} ${loader}
    else
        installer_partition_cp ${blockdev} ${partno} ${loader} ${loaderdst}
    fi
}

############################################################
#
# installer_platform_bootconfig <blockdev> <partno>
#
#    <blockdev> The block device name.
#    <partno>   The partition number.
#
# Generate and write the platform boot-config file
# into the given partition.
#
############################################################

installer_platform_bootconfig() {
    local blockdev=$1
    local partno=$2

    #
    # Is there a static boot-config in the installer package?
    #
    if [ -f "${installer_dir}/boot-config" ]; then
        installer_say "Writing boot-config."
        installer_partition_cp ${blockdev} ${partno} "${installer_dir}/boot-config"
    fi

    #
    # Unless the installer contains a boot-config
    # file it will have to be generated by the first-boot
    # script in the Loader.
    #

}

############################################################
#
# installer_platform_swi <blockdev> <partno>
#
#    <blockdev> The block device name.
#    <partno>   The partition number.
#
# Install the SWI to the given partition.
#
############################################################

installer_platform_swi() {
    local blockdev=$1
    local partno=$2

    SWISRC=`ls ${installer_dir}/*.swi`

    if [ -f "${SWISRC}" ]; then
        if [ ! ${SWIDST} ]; then
            SWIDST="$(basename ${SWISRC})"
        fi
        installer_say "Installing Open Network Linux Software Image (${SWIDST})..."
        installer_partition_cp ${blockdev} ${partno} ${SWISRC} ${SWIDST}
    else
        installer_say "No Open Network Linux Software Image available for installation. Post-install ZTN installation will be required."
    fi
}

############################################################
#
# installer_standard_blockdev_install <blockdev> <p1size> <p2size> <p3size>
#
#    <blockdev> The block device name.
#    <p1size>   The size of the loader partition.
#    <p2size>   The size of the /mnt/flash partition.
#    <p3size>   The size of the /mnt/flash2 partition.
#
# Performs a standard installation for the platform.
# Most platform installers will just call this function with the appropriate arguments.
#
############################################################
installer_standard_blockdev_install () {
    local blockdev=$1
    local p1size=$2
    local p2size=$3
    local p3size=$4
    local p4size=$5

    # Standard 3-partition format for loader, /mnt/flash, and /mnt/flash2
    installer_blockdev_format "${blockdev}" "${p1size}" "${p2size}" "${p3size}" "${p4size}"

    # Copy the platform loader to the first partition.
    installer_platform_loader "${blockdev}" 1

    # Set the boot-config file
    installer_platform_bootconfig "${blockdev}" 1

    # Copy the packaged SWI to the third partition.
    installer_platform_swi "${blockdev}" 3

    sync
    installer_umount_blockdev "${blockdev}"
}

############################################################
#
# installer_standard_blockdev_install <blockdev> <p1size> <p2size> <p3size>
#
#    <blockdev> The block device name.
#
# Performs a standard recovery for the platform.
#
############################################################
installer_standard_blockdev_recovery() {
    local blockdev=$1

    # Standard 3-partition format for loader, /mnt/flash, and /mnt/flash2
    installer_umount_blockdev ${blockdev}
    installer_say "Re-formatting ${blockdev}."
    installer_partition_format ${blockdev} 2 mkdosfs
    installer_partition_format ${blockdev} 3 mkdosfs

    sync
    installer_umount_blockdev "${blockdev}"
}

##############################
#
# End of lib.sh
#
##############################
